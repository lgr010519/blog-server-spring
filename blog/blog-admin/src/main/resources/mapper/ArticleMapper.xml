<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liugaorong.blog.admin.mapper.ArticleMapper">

    <insert id="insertArticle" useGeneratedKeys="true" keyProperty="id">
        insert into article (title, introduction, cover, category_id, is_comment, is_like, is_collect, views,
                             `like`, collect, comment, status, publish_status, content, create_time)
        values (#{title}, #{introduction}, #{cover}, #{categoryId}, #{isComment}, #{isLike}, #{isCollect}, #{views},
                #{like}, #{collect}, #{comment}, #{status}, #{publishStatus}, #{content}, #{createTime});
    </insert>
    <insert id="insertArticleIdAndTagId">
        insert into article_tag (article_id, tag_id, create_time)
        values (#{articleId}, #{tagId}, #{createTime});
    </insert>
    <update id="updateArticle">
        update article
        set title          = #{title},
            introduction   = #{introduction},
            cover          = #{cover},
            category_id    = #{categoryId},
            is_comment     = #{isComment},
            is_like        = #{isLike},
            is_collect     = #{isCollect},
            views          = #{views},
            `like`         = #{like},
            collect        = #{collect},
            comment        = #{comment},
            status         = #{status},
            publish_status = #{publishStatus},
            content        = #{content},
            update_time    = #{updateTime}
        where id = #{id};
    </update>
    <delete id="deleteOldTagIdByArticleId">
        delete
        from article_tag
        where article_id = #{articleId};
    </delete>
    <select id="selectArticlePage" resultType="com.liugaorong.blog.admin.vo.article.ArticleVo">
        select a.id,
        a.title,
        a.cover,
        a.introduction,
        a.category_id,
        a.views,
        a.comment,
        a.`like`,
        a.collect,
        a.status,
        a.publish_status,
        a.create_time,
        a.update_time
        from article a
        <where>
            is_deleted = 0
            <if test="queryDto.title != null">
                and title like concat('%',#{queryDto.title},'%')
            </if>
            <if test="categoryIdList != null">
                and category_id in
                <foreach collection="categoryIdList" item="categoryId" open="(" separator="," close=")">
                    #{categoryId}
                </foreach>
            </if>
            <if test="queryDto.status != null">
                and status=#{queryDto.status}
            </if>
            <if test="queryDto.publishStatus != null">
                and publish_status=#{queryDto.publishStatus}
            </if>
            <if test="queryDto.createTime != null">
                and create_time between #{queryDto.createtime.get(0)} and #{queryDto.createtime.get(1)}
            </if>
            <if test="queryDto.updateTime != null">
                and update_time between #{queryDto.updateTime.get(0)} and #{queryDto.updateTime.get(1)}
            </if>
        </where>
    </select>
    <select id="selectCategoryName" resultType="com.liugaorong.blog.model.entity.Category">
        select *
        from category
        where id = #{categoryId}
          and is_deleted = 0;
    </select>
    <select id="selectTagName" resultType="com.liugaorong.blog.model.entity.Tags">
        select t.id, t.`name`, t.status, t.create_time, t.update_time
        from `article` a
                 join article_tag `at` on a.id = `at`.article_id
                 join tag t on t.id = `at`.tag_id;
    </select>
</mapper>
